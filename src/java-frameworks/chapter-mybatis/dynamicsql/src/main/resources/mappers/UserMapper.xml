<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.UserMapper">
    
    <sql id="selectColumn">
        `pk_id` id, `uk_uname` uname, `password`, `email`
    </sql>

    <select id="getAllUsers" resultType="user">
        SELECT `pk_id` id, `uk_uname` uname, `password`, `email` FROM user
    </select>

    <select id="getUserById" resultType="user">
        SELECT `pk_id` id, `uk_uname` uname, `password`, `email` FROM user
        WHERE  pk_id = #{id}
    </select>

    <!-- List<User> getUserByConditionIf(User user); -->
    <select id="getUserByConditionIf" parameterType="map" resultType="user">
        SELECT `pk_id` id, `uk_uname` uname, `password`, `email` FROM user
        <!-- WHERE -->
        <where>
            <!-- 如果id=null，SQL语句会因为AND出错 -->
            <!-- 1. 在WHERE 后添加 1=1，后续条件全部使用AND拼接 -->
            <!-- 2. mybatis可以使用where标签将所有查询条件包括在内,
                    此时，where标签会去掉第一个多出来的AND或OR -->
            <if test="id != null">
                AND pk_id = #{id}
            </if>
            <if test="uname != null and uname != ''">
                AND uk_uname LIKE #{uname}
                <!-- uk_uname LIKE #{uname} -->
            </if>
            <if test="password != null and password != ''">
                AND password = #{password}
            </if>
            <if test="email != null and email.trim() != ''">
                AND email = #{email}
            </if>
        </where>
    </select>

    <!-- List<User> getUserByConditionTrim(User user); -->
    <select id="getUserByConditionTrim" parameterType="map" resultType="user">
        SELECT `pk_id` id, `uk_uname` uname, `password`, `email` FROM user
        <trim prefix="WHERE" suffixOverrides="AND">
            <if test="id != null">
                pk_id = #{id} AND
            </if>
            <if test="uname != null and uname != ''">
                uk_uname LIKE #{uname} AND
                <!-- uk_uname LIKE #{uname} -->
            </if>
            <if test="password != null and password != ''">
                password = #{password} AND
            </if>
            <if test="email != null and email.trim() != ''">
                email = #{email}
            </if>
        </trim>
    </select>

    <!-- List<User> getUserByConditionChoose(User user); -->
    <select id="getUserByConditionChoose" parameterType="map" resultType="user">
        SELECT `pk_id` id, `uk_uname` uname, `password`, `email` FROM user
        <where>
            <choose>
                <when test="id != null">pk_id = #{id}</when>
                <when test="uname != null and uname != ''">
                    uk_uname LIKE #{uname}
                </when>
                <when test="password != null and password != ''">
                    password = #{password}
                </when>
                <when test="email != null and email != ''">
                    email = #{email}
                </when>
                <otherwise>
                    1=1
                </otherwise>
            </choose>
        </where>
    </select>

    <!-- List<User> getUserByConditionForeach(List<Integer> ids); -->
    <select id="getUserByConditionForeach" resultType="user">
        SELECT `pk_id` id, `uk_uname` uname, `password`, `email` FROM user
        WHERE `pk_id` IN
        <foreach collection="ids" item="item_id" separator="," open="("
                 close=")">
            #{item_id}
        </foreach>
    </select>

    <!-- void updateUser(User user); -->
    <update id="updateUser" parameterType="map">
        UPDATE `user`
        <set>
            <if test="uname != null and uname != ''">
                uk_uname = #{uname}
            </if>
            <if test="password != null and password != ''">
                password = #{password}
            </if>
            <if test="email != null and email.trim() != ''">
                email = #{email}
            </if>
        </set>
        WHERE `pk_id`=#{id}
    </update>

    <!-- 批量添加 -->
    <!-- void addUsers(@Param("users") List<User> users); -->
    <insert id="addUsers">
        INSERT INTO `user`(`uk_uname`,`password`,`email`)
        VALUES
        <foreach collection="users" item="user" separator=",">
            (#{user.uname}, #{user.password}, #{user.email})
        </foreach>
    </insert>

    <!-- 两个内置参数： -->
    <!-- _parameter代表整个参数，如果是单个参数_parameter就是这个参数； -->
    <!--                       如果是多个参数，参数被封装为Map，_parameter代表这个Map -->
    <!-- _databaseId，如果配置了databaseIdProvider标签，_databaseId代表当前数据库的别名 -->

    <!-- List<User> getUserByInnerParameter(User user); -->
    <select id="getUserByInnerParameter" parameterType="map" resultType="user">
        SELECT
        <!-- 引用 -->
        <include refid="selectColumn"></include>
        FROM user
        <!-- <bind name="_uname" value="'%'+uname+'%'"/> -->
        <if test="_parameter != null">
            <!-- WHERE `uk_uname` LIKE #{_uname} -->
            WHERE `uk_uname` LIKE #{_parameter.uname}
        </if>
    </select>
</mapper>